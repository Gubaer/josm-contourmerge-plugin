plugins {
    id "org.openstreetmap.josm" version "$gradle_josm_plugin_version"
    id 'java'
    id 'groovy'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor "org.projectlombok:lombok:1.18.28"
    packIntoJar "org.apache.commons:commons-lang3:3.12.0"

    implementation "javax.validation:validation-api:2.0.1.Final"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.apache.groovy:groovy-all:4.0.13'
    testImplementation 'org.apache.groovy:groovy-test:4.0.13'
    testImplementation "org.hamcrest:hamcrest-library:2.2"

    testImplementation('org.openstreetmap.josm:josm-unittest:latest'){
        changing=true
    }
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}


base {
    archivesName = "contourmerge"
}


import org.openstreetmap.josm.plugins.contourmerge.build.Releases
def releases = Releases.fromFile(file("releases.yml"))
version=releases.currentPluginLabel

def deriveJosmCompileVersion(releases) {
    final value = project.hasProperty("plugin.josmCompileVersion")
            ? project.property("plugin.josmCompileVersion")
            : null
    def josmCompileVersion
    //noinspection GroovyFallthrough
    switch (value) {
        case null:
            josmCompileVersion = "latest"
            break
        case "latest":
        case "tested":
            josmCompileVersion = value
            break
        case "release":
            josmCompileVersion = releases.getLastCompatibleJosmVersion()
            break
        default:
            josmCompileVersion = value.isInteger() ? value as Integer : "latest"
    }
    return josmCompileVersion
}

def configuredJosmCompileVersion = deriveJosmCompileVersion(releases)
logger.info("Compiling for JOSM ${configuredJosmCompileVersion}")


josm {
    josmCompileVersion = configuredJosmCompileVersion
    manifest {
        minJavaVersion = 17
        includeLinksToGithubReleases = true
        minJosmVersion = releases.highestJosmVersion
    }

    github {
        repositoryName = "josm-contourmerge-plugin"
        repositoryOwner = "gubaer"
        targetCommitish = "master"
    }
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

test {
    useJUnitPlatform()
    scanForTestClasses = false
    systemProperty "josm.home", file("src/test/resources/josm.home").absolutePath

    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with " +
                "result: ${result.resultType}"
    }
}

sourceSets {
    main.resources {
        exclude "images/**/*.svg"
    }
}

processResources {
    from("$projectDir/README.md")
    from("$projectDir/LICENSE")
}

publishToGithubRelease {
    remoteJarName = "contourmerge.jar"
}
